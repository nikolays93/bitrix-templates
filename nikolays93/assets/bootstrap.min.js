!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,function(){"use strict";for(var e="undefined"!=typeof window&&"undefined"!=typeof document,t=["Edge","Trident","Firefox"],n=0,r=0;r<t.length;r+=1)if(e&&0<=navigator.userAgent.indexOf(t[r])){n=1;break}var a=e&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},n))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function y(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function d(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=y(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:d(p(e))}var i=e&&!(!window.MSInputMethodContext||!document.documentMode),o=e&&/MSIE 10/.test(navigator.userAgent);function g(e){return 11===e?i:10===e?o:i||o}function _(e){if(!e)return document.documentElement;for(var t=g(10)?document.body:null,n=e.offsetParent;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===y(n,"position")?_(n):n:e?e.ownerDocument.documentElement:document.documentElement}function c(e){return null!==e.parentNode?c(e.parentNode):e}function h(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,l=o.commonAncestorContainer;if(e!==l&&t!==l||r.contains(i))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&_(a.firstElementChild)!==a?_(l):l;var f=c(e);return f.host?h(f.host,t):h(e,c(t).host)}function m(e){var t="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function u(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function l(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],g(10)?n["offset"+e]+r["margin"+("Height"===e?"Top":"Left")]+r["margin"+("Height"===e?"Bottom":"Right")]:0)}function v(){var e=document.body,t=document.documentElement,n=g(10)&&getComputedStyle(t);return{height:l("Height",e,t,n),width:l("Width",e,t,n)}}var f=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),w=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e){return E({},e,{right:e.left+e.width,bottom:e.top+e.height})}function b(e){var t={};try{if(g(10)){t=e.getBoundingClientRect();var n=m(e,"top"),r=m(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?v():{},a=o.width||e.clientWidth||i.right-i.left,s=o.height||e.clientHeight||i.bottom-i.top,l=e.offsetWidth-a,f=e.offsetHeight-s;if(l||f){var c=y(e);l-=u(c,"x"),f-=u(c,"y"),i.width-=l,i.height-=f}return C(i)}function T(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=g(10),i="HTML"===t.nodeName,o=b(e),a=b(t),s=d(e),l=y(t),f=parseFloat(l.borderTopWidth,10),c=parseFloat(l.borderLeftWidth,10);n&&"HTML"===t.nodeName&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var u=C({top:o.top-a.top-f,left:o.left-a.left-c,width:o.width,height:o.height});if(u.marginTop=0,u.marginLeft=0,!r&&i){var p=parseFloat(l.marginTop,10),h=parseFloat(l.marginLeft,10);u.top-=f-p,u.bottom-=f-p,u.left-=c-h,u.right-=c-h,u.marginTop=p,u.marginLeft=h}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(u=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=m(t,"top"),i=m(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(u,t)),u}function O(e){if(!e||!e.parentElement||g())return document.documentElement;for(var t=e.parentElement;t&&"none"===y(t,"transform");)t=t.parentElement;return t||document.documentElement}function A(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?O(e):h(e,t);if("viewport"===r)o=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=T(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:m(n),s=t?0:m(n,"left");return C({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(a,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=d(p(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var l=T(s,a,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===y(t,"position")||e(p(t)))}(a))o=l;else{var f=v(),c=f.height,u=f.width;o.top+=l.top-l.marginTop,o.bottom=c+l.top,o.left+=l.left-l.marginLeft,o.right=u+l.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function D(e,t,r,n,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=A(r,n,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return E({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),f=l.filter(function(e){var t=e.width,n=e.height;return t>=r.clientWidth&&n>=r.clientHeight}),c=0<f.length?f[0].key:l[0].key,u=e.split("-")[1];return c+(u?"-"+u:"")}function P(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return T(n,r?O(t):h(t,n),r)}function N(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function I(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function S(e,t,n){n=n.split("-")[0];var r=N(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",f=o?"width":"height";return i[a]=t[a]+t[l]/2-r[l]/2,i[s]=n===s?t[s]-r[f]:t[I(s)],i}function x(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function j(e,n,t){return(void 0===t?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=x(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",t))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&s(t)&&(n.offsets.popper=C(n.offsets.popper),n.offsets.reference=C(n.offsets.reference),n=t(n,e))}),n}function H(e,n){return e.some(function(e){var t=e.name;return e.enabled&&t===n})}function k(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function L(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,L(e).addEventListener("resize",n.updateBound,{passive:!0});var i=d(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(d(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function M(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,L(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(n,r){Object.keys(r).forEach(function(e){var t="";-1!==["width","height","top","right","bottom","left"].indexOf(e)&&U(r[e])&&(t="px"),n.style[e]=r[e]+t})}function B(e,t,n){var r=x(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var R=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],K=R.slice(3);function Q(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=K.indexOf(e),r=K.slice(n+1).concat(K.slice(0,n));return t?r.reverse():r}var Y="flip",V="clockwise",q="counterclockwise";function $(e,i,o,t){var a=[0,0],s=-1!==["right","left"].indexOf(t),n=e.split(/(\+|\-)/).map(function(e){return e.trim()}),r=n.indexOf(x(n,function(e){return-1!==e.search(/,|\s/)}));n[r]&&-1===n[r].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,f=-1!==r?[n.slice(0,r).concat([n[r].split(l)[0]]),[n[r].split(l)[1]].concat(n.slice(r+1))]:[n];return(f=f.map(function(e,t){var n=(1===t?!s:s)?"height":"width",r=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,r=!0,e):r?(e[e.length-1]+=t,r=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return C(s)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,n,i,o)})})).forEach(function(n,r){n.forEach(function(e,t){U(e)&&(a[r]+=e*("-"===n[t-1]?-1:1))})}),a}var z={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",f=s?"width":"height",c={start:w({},l,o[l]),end:w({},l,o[l]+o[f]-a[f])};e.offsets.popper=E({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],l=void 0;return l=U(+n)?[+n,0]:$(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,r){var t=r.boundariesElement||_(e.instance.popper);e.instance.reference===t&&(t=_(t));var n=k("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[n];i.top="",i.left="",i[n]="";var l=A(e.instance.popper,e.instance.reference,r.padding,t,e.positionFixed);i.top=o,i.left=a,i[n]=s,r.boundaries=l;var f=r.priority,c=e.offsets.popper,u={primary:function(e){var t=c[e];return c[e]<l[e]&&!r.escapeWithReference&&(t=Math.max(c[e],l[e])),w({},e,t)},secondary:function(e){var t="right"===e?"left":"top",n=c[t];return c[e]>l[e]&&!r.escapeWithReference&&(n=Math.min(c[t],l[e]-("right"===e?c.width:c.height))),w({},t,n)}};return f.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=E({},c,u[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",l=a?"left":"top",f=a?"width":"height";return n[s]<o(r[l])&&(e.offsets.popper[l]=o(r[l])-n[f]),n[l]>o(r[s])&&(e.offsets.popper[l]=o(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!B(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,l=-1!==["left","right"].indexOf(i),f=l?"height":"width",c=l?"Top":"Left",u=c.toLowerCase(),p=l?"left":"top",h=l?"bottom":"right",d=N(r)[f];s[h]-d<a[u]&&(e.offsets.popper[u]-=a[u]-(s[h]-d)),s[u]+d>a[h]&&(e.offsets.popper[u]+=s[u]+d-a[h]),e.offsets.popper=C(e.offsets.popper);var g=s[u]+s[f]/2-d/2,m=y(e.instance.popper),v=parseFloat(m["margin"+c],10),_=parseFloat(m["border"+c+"Width"],10),b=g-e.offsets.popper[u]-v-_;return b=Math.max(Math.min(a[f]-d,b),0),e.arrowElement=r,e.offsets.arrow=(w(n={},u,Math.round(b)),w(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(d,g){if(H(d.instance.modifiers,"inner"))return d;if(d.flipped&&d.placement===d.originalPlacement)return d;var m=A(d.instance.popper,d.instance.reference,g.padding,g.boundariesElement,d.positionFixed),v=d.placement.split("-")[0],_=I(v),b=d.placement.split("-")[1]||"",y=[];switch(g.behavior){case Y:y=[v,_];break;case V:y=Q(v);break;case q:y=Q(v,!0);break;default:y=g.behavior}return y.forEach(function(e,t){if(v!==e||y.length===t+1)return d;v=d.placement.split("-")[0],_=I(v);var n,r=d.offsets.popper,i=d.offsets.reference,o=Math.floor,a="left"===v&&o(r.right)>o(i.left)||"right"===v&&o(r.left)<o(i.right)||"top"===v&&o(r.bottom)>o(i.top)||"bottom"===v&&o(r.top)<o(i.bottom),s=o(r.left)<o(m.left),l=o(r.right)>o(m.right),f=o(r.top)<o(m.top),c=o(r.bottom)>o(m.bottom),u="left"===v&&s||"right"===v&&l||"top"===v&&f||"bottom"===v&&c,p=-1!==["top","bottom"].indexOf(v),h=!!g.flipVariations&&(p&&"start"===b&&s||p&&"end"===b&&l||!p&&"start"===b&&f||!p&&"end"===b&&c);(a||u||h)&&(d.flipped=!0,(a||u)&&(v=y[t+1]),h&&(b="end"===(n=b)?"start":"start"===n?"end":n),d.placement=v+(b?"-"+b:""),d.offsets.popper=E({},d.offsets.popper,S(d.instance.popper,d.offsets.reference,d.placement)),d=j(d.instance.modifiers,d,"flip"))}),d},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),e.placement=I(t),e.offsets.popper=C(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!B(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=x(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=x(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=b(_(e.instance.popper)),l={position:i.position},f={left:Math.floor(i.left),top:Math.round(i.top),bottom:Math.round(i.bottom),right:Math.floor(i.right)},c="bottom"===n?"top":"bottom",u="right"===r?"left":"right",p=k("transform"),h=void 0,d=void 0;if(d="bottom"===c?-s.height+f.bottom:f.top,h="right"===u?-s.width+f.right:f.left,a&&p)l[p]="translate3d("+h+"px, "+d+"px, 0)",l[c]=0,l[u]=0,l.willChange="transform";else{var g="bottom"===c?-1:1,m="right"===u?-1:1;l[c]=d*g,l[u]=h*m,l.willChange=c+", "+u}var v={"x-placement":e.placement};return e.attributes=E({},v,e.attributes),e.styles=E({},l,e.styles),e.arrowStyles=E({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return W(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=P(i,t,e,n.positionFixed),a=D(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),W(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},G=function(){function o(e,t){var n=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=a(this.update.bind(this)),this.options=E({},o.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(E({},o.Defaults.modifiers,r.modifiers)).forEach(function(e){n.options.modifiers[e]=E({},o.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return E({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return f(o,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=D(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=S(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=j(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,H(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[k("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return M.call(this)}}]),o}();return G.Utils=("undefined"!=typeof window?window:global).PopperUtils,G.placements=R,G.Defaults=z,G});var Util=function(r){var t="transitionend";function e(e){var t=this,n=!1;return r(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(t)},e),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");t&&"#"!==t||(t=e.getAttribute("href")||"");try{return 0<r(document).find(t).length?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=r(e).css("transition-duration");return parseFloat(t)?(t=t.split(",")[0],1e3*parseFloat(t)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){r(e).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=t[r],a=o&&l.isElement(o)?"element":(s=o,{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s}};return r.fn.emulateTransitionEnd=e,r.event.special[l.TRANSITION_END]={bindType:t,delegateType:t,handle:function(e){if(r(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},l}($);function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){_defineProperty(t,e,n[e])})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Collapse=function(l){var t="collapse",f="bs.collapse",e="."+f,n=l.fn[t],i={toggle:!0,parent:""},r={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},u="show",p="collapse",h="collapsing",d="collapsed",o="width",a="height",g=".show, .collapsing",m='[data-toggle="collapse"]',s=function(){function s(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=l.makeArray(l('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=l(m),r=0;r<n.length;r++){var i=n[r],o=Util.getSelectorFromElement(i);null!==o&&0<l(o).filter(e).length&&(this._selector=o,this._triggerArray.push(i))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=s.prototype;return e.toggle=function(){l(this._element).hasClass(u)?this.hide():this.show()},e.show=function(){var e,t,n=this;if(!this._isTransitioning&&!l(this._element).hasClass(u)&&(this._parent&&0===(e=l.makeArray(l(this._parent).find(g).filter('[data-parent="'+this._config.parent+'"]'))).length&&(e=null),!(e&&(t=l(e).not(this._selector).data(f))&&t._isTransitioning))){var r=l.Event(c.SHOW);if(l(this._element).trigger(r),!r.isDefaultPrevented()){e&&(s._jQueryInterface.call(l(e).not(this._selector),"hide"),t||l(e).data(f,null));var i=this._getDimension();l(this._element).removeClass(p).addClass(h),(this._element.style[i]=0)<this._triggerArray.length&&l(this._triggerArray).removeClass(d).attr("aria-expanded",!0),this.setTransitioning(!0);var o="scroll"+(i[0].toUpperCase()+i.slice(1)),a=Util.getTransitionDurationFromElement(this._element);l(this._element).one(Util.TRANSITION_END,function(){l(n._element).removeClass(h).addClass(p).addClass(u),n._element.style[i]="",n.setTransitioning(!1),l(n._element).trigger(c.SHOWN)}).emulateTransitionEnd(a),this._element.style[i]=this._element[o]+"px"}}},e.hide=function(){var e=this;if(!this._isTransitioning&&l(this._element).hasClass(u)){var t=l.Event(c.HIDE);if(l(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",Util.reflow(this._element),l(this._element).addClass(h).removeClass(p).removeClass(u),0<this._triggerArray.length)for(var r=0;r<this._triggerArray.length;r++){var i=this._triggerArray[r],o=Util.getSelectorFromElement(i);if(null!==o)l(o).hasClass(u)||l(i).addClass(d).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var a=Util.getTransitionDurationFromElement(this._element);l(this._element).one(Util.TRANSITION_END,function(){e.setTransitioning(!1),l(e._element).removeClass(h).addClass(p).trigger(c.HIDDEN)}).emulateTransitionEnd(a)}}},e.setTransitioning=function(e){this._isTransitioning=e},e.dispose=function(){l.removeData(this._element,f),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(e){return(e=_objectSpread({},i,e)).toggle=Boolean(e.toggle),Util.typeCheckConfig(t,e,r),e},e._getDimension=function(){return l(this._element).hasClass(o)?o:a},e._getParent=function(){var n=this,e=null;Util.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=l(this._config.parent)[0];var t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return l(e).find(t).each(function(e,t){n._addAriaAndCollapsedClass(s._getTargetFromElement(t),[t])}),e},e._addAriaAndCollapsedClass=function(e,t){if(e){var n=l(e).hasClass(u);0<t.length&&l(t).toggleClass(d,!n).attr("aria-expanded",n)}},s._getTargetFromElement=function(e){var t=Util.getSelectorFromElement(e);return t?l(t)[0]:null},s._jQueryInterface=function(r){return this.each(function(){var e=l(this),t=e.data(f),n=_objectSpread({},i,e.data(),"object"==typeof r&&r?r:{});if(!t&&n.toggle&&/show|hide/.test(r)&&(n.toggle=!1),t||(t=new s(this,n),e.data(f,t)),"string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'+r+'"');t[r]()}})},_createClass(s,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return i}}]),s}();return l(document).on(c.CLICK_DATA_API,m,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=l(this),t=Util.getSelectorFromElement(this);l(t).each(function(){var e=l(this),t=e.data(f)?"toggle":n.data();s._jQueryInterface.call(e,t)})}),l.fn[t]=s._jQueryInterface,l.fn[t].Constructor=s,l.fn[t].noConflict=function(){return l.fn[t]=n,s._jQueryInterface},s}($);function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){_defineProperty(t,e,n[e])})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Dropdown=function(f){var t="dropdown",c="bs.dropdown",n="."+c,e=".data-api",r=f.fn[t],a=new RegExp("38|40|27"),u={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,CLICK:"click"+n,CLICK_DATA_API:"click"+n+e,KEYDOWN_DATA_API:"keydown"+n+e,KEYUP_DATA_API:"keyup"+n+e},s="disabled",p="show",i="dropup",o="dropright",h="dropleft",d="dropdown-menu-right",g="position-static",m='[data-toggle="dropdown"]',l=".dropdown form",v=".dropdown-menu",_=".navbar-nav",b=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",y="top-start",w="top-end",E="bottom-start",C="bottom-end",T="right-start",O="left-start",A={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},D={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},P=function(){function l(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=l.prototype;return e.toggle=function(){if(!this._element.disabled&&!f(this._element).hasClass(s)){var e=l._getParentFromElement(this._element),t=f(this._menu).hasClass(p);if(l._clearMenus(),!t){var n={relatedTarget:this._element},r=f.Event(u.SHOW,n);if(f(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if("undefined"==typeof Popper)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var i=this._element;"parent"===this._config.reference?i=e:Util.isElement(this._config.reference)&&(i=this._config.reference,void 0!==this._config.reference.jquery&&(i=this._config.reference[0])),"scrollParent"!==this._config.boundary&&f(e).addClass(g),this._popper=new Popper(i,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===f(e).closest(_).length&&f(document.body).children().on("mouseover",null,f.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),f(this._menu).toggleClass(p),f(e).toggleClass(p).trigger(f.Event(u.SHOWN,n))}}}},e.dispose=function(){f.removeData(this._element,c),f(this._element).off(n),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;f(this._element).on(u.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},e._getConfig=function(e){return e=_objectSpread({},this.constructor.Default,f(this._element).data(),e),Util.typeCheckConfig(t,e,this.constructor.DefaultType),e},e._getMenuElement=function(){if(!this._menu){var e=l._getParentFromElement(this._element);this._menu=f(e).find(v)[0]}return this._menu},e._getPlacement=function(){var e=f(this._element).parent(),t=E;return e.hasClass(i)?(t=y,f(this._menu).hasClass(d)&&(t=w)):e.hasClass(o)?t=T:e.hasClass(h)?t=O:f(this._menu).hasClass(d)&&(t=C),t},e._detectNavbar=function(){return 0<f(this._element).closest(".navbar").length},e._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=_objectSpread({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},l._jQueryInterface=function(t){return this.each(function(){var e=f(this).data(c);if(e||(e=new l(this,"object"==typeof t?t:null),f(this).data(c,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},l._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=f.makeArray(f(m)),n=0;n<t.length;n++){var r=l._getParentFromElement(t[n]),i=f(t[n]).data(c),o={relatedTarget:t[n]};if(i){var a=i._menu;if(f(r).hasClass(p)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&f.contains(r,e.target))){var s=f.Event(u.HIDE,o);f(r).trigger(s),s.isDefaultPrevented()||("ontouchstart"in document.documentElement&&f(document.body).children().off("mouseover",null,f.noop),t[n].setAttribute("aria-expanded","false"),f(a).removeClass(p),f(r).removeClass(p).trigger(f.Event(u.HIDDEN,o)))}}}},l._getParentFromElement=function(e){var t,n=Util.getSelectorFromElement(e);return n&&(t=f(n)[0]),t||e.parentNode},l._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||f(e.target).closest(v).length)):a.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!f(this).hasClass(s))){var t=l._getParentFromElement(this),n=f(t).hasClass(p);if((n||27===e.which&&32===e.which)&&(!n||27!==e.which&&32!==e.which)){var r=f(t).find(b).get();if(0!==r.length){var i=r.indexOf(e.target);38===e.which&&0<i&&i--,40===e.which&&i<r.length-1&&i++,i<0&&(i=0),r[i].focus()}}else{if(27===e.which){var o=f(t).find(m)[0];f(o).trigger("focus")}f(this).trigger("click")}}},_createClass(l,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return A}},{key:"DefaultType",get:function(){return D}}]),l}();return f(document).on(u.KEYDOWN_DATA_API,m,P._dataApiKeydownHandler).on(u.KEYDOWN_DATA_API,v,P._dataApiKeydownHandler).on(u.CLICK_DATA_API+" "+u.KEYUP_DATA_API,P._clearMenus).on(u.CLICK_DATA_API,m,function(e){e.preventDefault(),e.stopPropagation(),P._jQueryInterface.call(f(this),"toggle")}).on(u.CLICK_DATA_API,l,function(e){e.stopPropagation()}),f.fn[t]=P._jQueryInterface,f.fn[t].Constructor=P,f.fn[t].noConflict=function(){return f.fn[t]=r,P._jQueryInterface},P}($,Popper);function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){_defineProperty(t,e,n[e])})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var ScrollSpy=function(a){var r="scrollspy",i="bs.scrollspy",t="."+i,e=a.fn[r],o={offset:10,method:"auto",target:""},s={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate"+t,SCROLL:"scroll"+t,LOAD_DATA_API:"load"+t+".data-api"},f="dropdown-item",c="active",u='[data-spy="scroll"]',p=".active",h=".nav, .list-group",d=".nav-link",g=".nav-item",m=".list-group-item",v=".dropdown",_=".dropdown-item",b=".dropdown-toggle",y="offset",w="position",E=function(){function n(e,t){var n=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" "+d+","+this._config.target+" "+m+","+this._config.target+" "+_,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,a(this._scrollElement).on(l.SCROLL,function(e){return n._process(e)}),this.refresh(),this._process()}var e=n.prototype;return e.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?y:w,i="auto"===this._config.method?e:this._config.method,o=i===w?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),a.makeArray(a(this._selector)).map(function(e){var t,n=Util.getSelectorFromElement(e);if(n&&(t=a(n)[0]),t){var r=t.getBoundingClientRect();if(r.width||r.height)return[a(t)[i]().top+o,n]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},e.dispose=function(){a.removeData(this._element,i),a(this._scrollElement).off(t),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},e._getConfig=function(e){if("string"!=typeof(e=_objectSpread({},o,"object"==typeof e&&e?e:{})).target){var t=a(e.target).attr("id");t||(t=Util.getUID(r),a(e.target).attr("id",t)),e.target="#"+t}return Util.typeCheckConfig(r,e,s),e},e._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},e._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},e._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},e._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),n<=e){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;){this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])}}},e._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",");e=e.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var n=a(e.join(","));n.hasClass(f)?(n.closest(v).find(b).addClass(c),n.addClass(c)):(n.addClass(c),n.parents(h).prev(d+", "+m).addClass(c),n.parents(h).prev(g).children(d).addClass(c)),a(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:t})},e._clear=function(){a(this._selector).filter(p).removeClass(c)},n._jQueryInterface=function(t){return this.each(function(){var e=a(this).data(i);if(e||(e=new n(this,"object"==typeof t&&t),a(this).data(i,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return o}}]),n}();return a(window).on(l.LOAD_DATA_API,function(){for(var e=a.makeArray(a(u)),t=e.length;t--;){var n=a(e[t]);E._jQueryInterface.call(n,n.data())}}),a.fn[r]=E._jQueryInterface,a.fn[r].Constructor=E,a.fn[r].noConflict=function(){return a.fn[r]=e,E._jQueryInterface},E}($);function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Tab=function(f){var i="bs.tab",e="."+i,t=f.fn.tab,c={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,CLICK_DATA_API:"click"+e+".data-api"},o="dropdown-menu",u="active",p="disabled",l="fade",a="show",s=".dropdown",h=".nav, .list-group",d=".active",g="> li > .active",n='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',m=".dropdown-toggle",v="> .dropdown-menu .active",r=function(){function r(e){this._element=e}var e=r.prototype;return e.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&f(this._element).hasClass(u)||f(this._element).hasClass(p))){var e,r,t=f(this._element).closest(h)[0],i=Util.getSelectorFromElement(this._element);if(t){var o="UL"===t.nodeName?g:d;r=(r=f.makeArray(f(t).find(o)))[r.length-1]}var a=f.Event(c.HIDE,{relatedTarget:this._element}),s=f.Event(c.SHOW,{relatedTarget:r});if(r&&f(r).trigger(a),f(this._element).trigger(s),!s.isDefaultPrevented()&&!a.isDefaultPrevented()){i&&(e=f(i)[0]),this._activate(this._element,t);var l=function(){var e=f.Event(c.HIDDEN,{relatedTarget:n._element}),t=f.Event(c.SHOWN,{relatedTarget:r});f(r).trigger(e),f(n._element).trigger(t)};e?this._activate(e,e.parentNode,l):l()}}},e.dispose=function(){f.removeData(this._element,i),this._element=null},e._activate=function(e,t,n){var r=this,i=("UL"===t.nodeName?f(t).find(g):f(t).children(d))[0],o=n&&i&&f(i).hasClass(l),a=function(){return r._transitionComplete(e,i,n)};if(i&&o){var s=Util.getTransitionDurationFromElement(i);f(i).one(Util.TRANSITION_END,a).emulateTransitionEnd(s)}else a()},e._transitionComplete=function(e,t,n){if(t){f(t).removeClass(a+" "+u);var r=f(t.parentNode).find(v)[0];r&&f(r).removeClass(u),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(f(e).addClass(u),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),Util.reflow(e),f(e).addClass(a),e.parentNode&&f(e.parentNode).hasClass(o)){var i=f(e).closest(s)[0];i&&f(i).find(m).addClass(u),e.setAttribute("aria-expanded",!0)}n&&n()},r._jQueryInterface=function(n){return this.each(function(){var e=f(this),t=e.data(i);if(t||(t=new r(this),e.data(i,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},_createClass(r,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),r}();return f(document).on(c.CLICK_DATA_API,n,function(e){e.preventDefault(),r._jQueryInterface.call(f(this),"show")}),f.fn.tab=r._jQueryInterface,f.fn.tab.Constructor=r,f.fn.tab.noConflict=function(){return f.fn.tab=t,r._jQueryInterface},r}($);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
